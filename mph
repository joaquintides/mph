//
// Copyright (c) 2024 Kris Jusiak (kris at jusiak dot net)
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
#if __cplusplus < 202002L
#error "MPH requires C++20!"
#else

#if defined(__cpp_modules)
export module mph;
#endif

#ifndef MPH
#define MPH 1'0'7 // SemVer - should match mph namespace

#include <algorithm>
#include <climits>
#include <concepts>
#include <array>
#include <bit>
#include <cassert>
#include <cstdint>
#include <numeric>
#include <ranges>
#include <string_view>
#include <span>
#include <type_traits>
#include <vector>
#include <tuple>

#if __has_include(<x86intrin.h>)
#include <x86intrin.h>
#endif

#if not defined(MPH_FIXED_STRING_MAX_SIZE)
#define MPH_FIXED_STRING_MAX_SIZE 32u
#endif

#if not defined(MPH_CACHE_LINE_SIZE)
#if defined(__cpp_lib_hardware_interference_size)
#include <new>
#define MPH_CACHE_LINE_SIZE ::std::hardware_constructive_interference_size
#else
#define MPH_CACHE_LINE_SIZE 64u // x86-64
#endif
#endif

#if not defined(MPH_ALLOW_UNSAFE_MEMCPY)
#define MPH_ALLOW_UNSAFE_MEMCPY 1 // enabled by default, only required for string based keys
#endif

#if not defined(MPH_PAGE_SIZE)
#define MPH_PAGE_SIZE 4096u // only used with MPH_ALLOW_UNSAFE_MEMCPY
#endif

#if defined(__cpp_modules)
export
#endif

/**
 * Minimal perfect hash function library (https://en.wikipedia.org/wiki/Perfect_hash_function#Minimal_perfect_hash_function)
 */
namespace mph::inline v1_0_7 {
template<class T, const std::size_t max_size> struct basic_fixed_string final {
  constexpr basic_fixed_string() = default;
  template<const std::size_t Size>
  constexpr explicit(false) basic_fixed_string(const T (&input)[Size]) requires (Size <= max_size) : size_{Size-1} {
    std::copy_n(input, Size-1, std::data(data_)); // no null termination
  }
  template<const std::size_t Size>
  constexpr explicit(false) basic_fixed_string(const std::span<const T, Size> input) requires (Size < max_size) : size_{Size} {
    std::copy_n(std::data(input), Size, std::data(data_)); // no null termination
  }

  [[nodiscard]] constexpr auto data() const { return std::data(data_); }
  [[nodiscard]] constexpr auto size() const { return size_; }
  [[nodiscard]] constexpr auto operator[](const auto i) const { return data_[i]; }
  [[nodiscard]] constexpr explicit(true) operator std::string_view() const { return std::string_view{std::data(data_), size()}; }
  [[nodiscard]] constexpr auto operator<=>(const basic_fixed_string&) const = default;

  std::size_t size_{};
  std::array<T, max_size> data_{};
};

using fixed_string = basic_fixed_string<char, MPH_FIXED_STRING_MAX_SIZE>;

// clang-format off
static_assert(0u == std::size(fixed_string{}));
static_assert(0u == std::size(fixed_string{""}));
static_assert(3u == std::size(fixed_string{"abc"}));
static_assert('a' == fixed_string{"abc"}[0]);
static_assert('a' == fixed_string{"abc"}[0]);
static_assert('b' == fixed_string{"abc"}[1]);
static_assert('c' == fixed_string{"abc"}[2]);
static_assert(fixed_string{"abc"} == fixed_string{"abc"});
static_assert(fixed_string{"abc"} == fixed_string{std::span<const char, 3>{"abc", 3}});
static_assert(fixed_string{"foo"} != fixed_string{"bar"});
static_assert(std::string_view{"abc"} == static_cast<std::string_view>(fixed_string{"abc"}));
// clang-format on

namespace utility {
template <std::size_t N>
  requires(N > 0u)
struct bitset final { // std::bitset is constexpr in C++23
  constexpr explicit(true) bitset(const auto value) {
    for (std::size_t i{}; i < N; ++i) {
      bits[i] = value & (1ull << i);
    }
  }
  constexpr auto set(const auto i, const auto value) { bits[i] = value; }
  [[nodiscard]] constexpr auto size() const { return std::size(bits); }
  [[nodiscard]] constexpr auto operator[](const auto i) const { return bits[i]; }
  template <class T, const auto endian = std::endian::native>
  [[nodiscard]] constexpr auto to() const -> T
    requires(sizeof(T) * CHAR_BIT >= N)
  {
    static_assert(endian == std::endian::little);
    T result{};
    for (auto i = 0u; i < N; ++i) {
      result |= static_cast<T>(bits[i]) << i;
    }
    return result;
  }
 private:
  std::array<bool, N> bits{};
};

// clang-format off
static_assert(1 == bitset<1>{1}[0]);
static_assert(0 == bitset<1>{0}[0]);
static_assert(1 == bitset<2>{0b01}[0]);
static_assert(0 == bitset<2>{0b01}[1]);
static_assert(0b01 == bitset<2>{0b01}.to<int>());
static_assert(0b10 == bitset<2>{0b10}.to<int>());
// clang-format on

template <class T, const auto endian = std::endian::native>
[[nodiscard]] constexpr auto as(const auto value) -> T {
  if constexpr (requires { std::size(value); }) {
    static_assert(endian == std::endian::little);
    T result{};
    for (auto i = 0u; i < std::min(std::size(value), sizeof(T)); ++i) {
      result = (result << CHAR_BIT) | value[std::min(std::size(value), sizeof(T)) - 1 - i];
    }
    return result;
  } else {
    return value;
  }
}

// clang-format off
static_assert(std::is_same_v<std::uint16_t, decltype(as<std::uint16_t>(std::array<std::uint8_t, 2>{0, 1}))>);
static_assert(std::uint32_t(0b00000001'00000000) == as<std::uint16_t>(std::array<std::uint8_t, 2>{0, 1}));
static_assert(std::is_same_v<std::uint16_t, decltype(as<std::uint16_t>( std::array<std::uint8_t, 2>{1, 0}))>);
static_assert(std::uint32_t(0b00000000'00000001) == as<std::uint16_t>(std::array<std::uint8_t, 2>{1, 0}));
static_assert(std::is_same_v<std::uint8_t, decltype(as<std::uint8_t>(std::string_view{"a"}))>);
static_assert(std::uint8_t('a') == as<std::uint8_t>(std::string_view{"a"}));
static_assert(std::is_same_v<std::uint32_t, decltype(as<std::uint32_t>(std::array<std::uint8_t, 4>{ 'a', 'b', 0, 0}))>);
static_assert(((std::uint32_t('b') << CHAR_BIT) | std::uint32_t('a') << 0) == as<std::uint32_t>(std::array<std::uint8_t, 4>{'a', 'b', 0, 0}));
static_assert(std::is_same_v<std::uint32_t, decltype(as<std::uint32_t>(std::array<std::uint8_t, 4>{0, 0, 'a', 'b'}))>);
static_assert(((std::uint32_t('b') << CHAR_BIT*3) | std::uint32_t('a') << CHAR_BIT*2) == as<std::uint32_t>(std::array<std::uint8_t, 4>{0, 0, 'a', 'b'}));
// clang-format on

[[nodiscard]] constexpr auto size(const auto value) {
  if constexpr (requires { std::size(value); }) {
    return std::size(value);
  } else {
    return sizeof(std::remove_cvref_t<decltype(value)>);
  }
}

// clang-format off
static_assert(sizeof(std::int32_t) == utility::size(std::int32_t{}));
static_assert(sizeof(std::int64_t) == utility::size(std::int64_t{}));
static_assert(1u == utility::size(std::array<char, 1>{' '}));
static_assert(2u == utility::size(std::array<char, 2>{'a', 'b'}));
// clang-format on

template<class... Ts> struct overload final : Ts... { using Ts::operator()...; };
template<class... Ts> overload(Ts...) -> overload<Ts...>;

// clang-format off
static_assert(42 == overload{[](auto v) { return v; }}(42));
static_assert(1 == overload{[](int) { return 1; }, [](bool) { return 2; }}(int{}));
static_assert(2 == overload{[](int) { return 1; }, [](bool) { return 2; }}(bool{}));
// clang-format on

/**
 * https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#text=pext
 *
 * DO WHILE m < 64
 *   IF mask[m] == 1
 *     dst[k] := tmp[m]
 *     k := k + 1
 *   FI
 *   m := m + 1
 * OD
 */
template <class T, const auto endian = std::endian::native>
[[nodiscard]] constexpr auto pext(const T a, T mask) {
  static_assert(endian == std::endian::little);
  T result{};
  auto k = 0u;
  auto m = 0u;
  while (m < sizeof(T) * CHAR_BIT) {
    if ((mask & 1) == 1) {
      result |= ((a >> m) & 1) << k++;
    }
    mask >>= 1;
    ++m;
  }
  return result;
}

[[nodiscard]] [[gnu::target("bmi2")]] inline auto pext(const std::uint32_t a, const std::uint32_t mask) {
  return _pext_u32(a, mask);
}

[[nodiscard]] [[gnu::target("bmi2")]] inline auto pext(const std::uint64_t a, const std::uint64_t mask) {
  return _pext_u64(a, mask);
}

// clang-format off
static_assert(0b00 == pext(0b00, 0b00));
static_assert(0b00 == pext(0b01, 0b00));
static_assert(0b01 == pext(0b01, 0b01));
static_assert(0b01 == pext(0b01, 0b11));
static_assert(0b00 == pext(0b01, 0b10));
static_assert(0b01 == pext(0b11, 0b10));
static_assert(0b01 == pext(0b11, 0b01));
static_assert(0b11 == pext(0b11, 0b11));
// clang-format on

/**
 * Finds T type mask which uniquely identifies given keys
 */
template <class T>
[[nodiscard]] constexpr auto find_mask(const std::ranges::range auto &keys) {
  const auto is_unique = [&](const auto mask) {
    std::vector<T> v{};
    for (const auto &key : keys) {
      const auto value = pext<T>(as<T>(get<0>(key)), mask.template to<T>());
      if (std::find(std::cbegin(v), std::cend(v), value) != std::cend(v)) {
        return false;
      }
      v.push_back(value);
    }
    return true;
  };

  bitset<sizeof(T) * CHAR_BIT> mask(std::numeric_limits<T>::max());
  for (auto i = 0u; i < std::size(mask); ++i) {
    mask.set(i, 0);
    if (not is_unique(mask)) {
      mask.set(i, 1);
    }
  }
  assert(is_unique(mask));
  return mask.template to<T>();
}

// clang-format off
static_assert(0b00000000'00000001 == find_mask<std::uint16_t>(std::array{std::pair{std::array<std::uint8_t, 2>{1, 0}, 0}, std::pair{std::array<std::uint8_t, 2>{0, 0}, 0}}));
static_assert(0b00000001'00000000 == find_mask<std::uint16_t>(std::array{std::pair{std::array<std::uint8_t, 2>{0, 0}, 0}, std::pair{std::array<std::uint8_t, 2>{0, 1}, 0}}));
static_assert(0b00000001'00000000 == find_mask<std::uint16_t>(std::array{std::pair{std::array<std::uint8_t, 2>{1, 0}, 0}, std::pair{std::array<std::uint8_t, 2>{0, 1}, 0}}));
static_assert(0b00000001'00000000 == find_mask<std::uint16_t>(std::array{std::pair{std::array<std::uint8_t, 2>{0, 1}, 0}, std::pair{std::array<std::uint8_t, 2>{1, 0}, 0}}));
static_assert(0b00000001'00000000 == find_mask<std::uint16_t>(std::array{std::pair{std::array<std::uint8_t, 2>{1, 1}, 0}, std::pair{std::array<std::uint8_t, 2>{1, 0}, 0}}));
static_assert(0b00000000'00000001 == find_mask<std::uint16_t>(std::array{std::pair{std::array<std::uint8_t, 2>{1, 1}, 0}, std::pair{std::array<std::uint8_t, 2>{0, 1}, 0}}));
static_assert(0b00000000'00000001'00000001 == find_mask<std::uint16_t>(std::array{std::pair{std::array<std::uint8_t, 3>{1, 1, 1}, 0}, std::pair{std::array<std::uint8_t, 3>{0, 0, 0}, 0}, std::pair{std::array<std::uint8_t, 3>{1, 0, 1}, 0}}));
static_assert(0b00000000'00000001'00000001 == find_mask<std::uint16_t>(std::array{std::pair{std::array<std::uint8_t, 3>{0, 0, 1}, 0}, std::pair{std::array<std::uint8_t, 3>{1, 0, 1}, 0}, std::pair{std::array<std::uint8_t, 3>{1, 1, 0}, 0}}));
static_assert(0b00000000'00000001'00000001 == find_mask<std::uint16_t>(std::array{std::pair{std::array<std::uint8_t, 3>{0, 0, 0}, 0}, std::pair{std::array<std::uint8_t, 3>{1, 1, 1}, 0}, std::pair{std::array<std::uint8_t, 3>{0, 1, 0}, 0}}));
// clang-format on

template<const auto keys>
  requires (std::size(keys) > 0u)
inline constexpr auto min_max_length = [](const auto& v) { // std::minmax_element is not constexpr
  auto min = utility::size(get<0>(v[0]));
  auto max = utility::size(get<0>(v[0]));
  for (const auto& key : v) {
    std::tie(min, max) = std::pair{std::min(min, utility::size(get<0>(key))), std::max(max, utility::size(get<0>(key)))};
  }
  return std::pair{min, max};
}(keys);

// clang-format off
// static_assert(std::pair{0ul, 0ul} == min_max_length<std::array{std::pair{fixed_string{""}, 0}}>);
// static_assert(std::pair{1ul, 1ul} == min_max_length<std::array{std::pair{fixed_string{"a"}, 0}, std::pair{fixed_string{"b"}, 0}}>);
// static_assert(std::pair{1ul, 2ul} == min_max_length<std::array{std::pair{fixed_string{"a"}, 0}, std::pair{fixed_string{"b"}, 0}, std::pair{fixed_string{"ab"}, 0}}>);
// clang-format on

template<const auto keys>
inline constexpr auto max_length = [](const auto& v) { return utility::size(get<0>(*std::max_element(std::cbegin(v), std::cend(v), [](const auto& lhs, const auto& rhs) { return utility::size(get<0>(lhs)) < utility::size(get<0>(rhs)); }))); }(keys);

// clang-format off
static_assert(0u == max_length<std::array{std::pair{fixed_string{""}, 0}}>);
static_assert(1u == max_length<std::array{std::pair{fixed_string{"a"}, 0}, std::pair{fixed_string{"b"}, 0}}>);
static_assert(2u == max_length<std::array{std::pair{fixed_string{"a"}, 0}, std::pair{fixed_string{"b"}, 0}, std::pair{fixed_string{"ab"}, 0}}>);
// clang-format on

template<const auto keys>
inline constexpr auto find_unique_char_max_dist = [](const auto &v) -> std::size_t {
  if constexpr (constexpr auto min_max = utility::min_max_length<keys>; min_max.second <= 1u) {
    return {};
  } else {
    std::array<std::size_t, min_max.first> counts{};
    for (auto i = 0u; i < min_max.first; ++i) {
      std::vector<std::remove_cvref_t<decltype(get<0>(v[0])[i])>> chars{};
      std::transform(std::cbegin(v), std::cend(v), std::back_inserter(chars), [i](const auto& key) { return get<0>(key)[i]; });
      std::sort(std::begin(chars), std::end(chars));
      counts[i] = std::distance(std::begin(chars), std::unique(std::begin(chars), std::end(chars)));
    }
    return std::distance(std::cbegin(counts), std::max_element(std::cbegin(counts), std::cend(counts)));
  }
}(keys);

// clang-format off
static_assert(0u == find_unique_char_max_dist<std::array{std::pair{fixed_string{"a"}, 0}}>);
static_assert(0u == find_unique_char_max_dist<std::array{std::pair{fixed_string{"a"}, 0}, std::pair{fixed_string{"b"}, 0}}>);
static_assert(1u == find_unique_char_max_dist<std::array{std::pair{fixed_string{"ab"}, 0}, std::pair{fixed_string{"ac"}, 0}}>);
static_assert(1u == find_unique_char_max_dist<std::array{std::pair{fixed_string{"ba"}, 0}, std::pair{fixed_string{"bb"}, 0}}>);
// clang-format on

template<const auto keys>
inline constexpr auto max_value = [](const auto &v) {
  if constexpr (const auto max = get<1>(*std::max_element(std::cbegin(v), std::cend(v), [](const auto& lhs, const auto& rhs) { return get<1>(lhs) < get<1>(rhs); })); std::is_enum_v<std::remove_cvref_t<decltype(max)>>) { // std::to_underlying is C++23
    return static_cast<std::underlying_type_t<std::remove_cvref_t<decltype(max)>>>(max);
  } else {
    return max;
  }
}(keys);

// clang-format off
static_assert(0 == max_value<std::array{std::pair{fixed_string{"a"}, 0}}>);
static_assert(1 == max_value<std::array{std::pair{fixed_string{"a"}, 0}, std::pair{fixed_string{"b"}, 1}}>);
static_assert(2 == max_value<std::array{std::pair{fixed_string{"a"}, 2}, std::pair{fixed_string{"b"}, 1}}>);
static_assert(2 == max_value<std::array{std::pair{fixed_string{"a"}, 1}, std::pair{fixed_string{"b"}, 2}}>);
// clang-format on

namespace detail {
template<const auto value> requires (value >= 0)
[[nodiscard]] consteval auto min_required_t() {
  if constexpr (value <= std::numeric_limits<std::uint8_t>::max()) {
    return std::uint8_t{};
  } else if constexpr (value <= std::numeric_limits<std::uint16_t>::max()) {
    return std::uint16_t{};
  } else if constexpr (value <= std::numeric_limits<std::uint32_t>::max()) {
    return std::uint32_t{};
  } else if constexpr (value <= std::numeric_limits<std::uint64_t>::max()) {
    return std::uint64_t{};
  }
};
} // namespace detail

template<const auto value> requires (value >= 0)
using min_required_t = decltype(detail::min_required_t<value>());

// clang-format off
static_assert(std::is_same_v<std::uint8_t, min_required_t<0>>);
static_assert(std::is_same_v<std::uint8_t, min_required_t<std::numeric_limits<std::uint8_t>::max()>>);
static_assert(std::is_same_v<std::uint16_t, min_required_t<std::numeric_limits<std::uint16_t>::max()>>);
static_assert(std::is_same_v<std::uint32_t, min_required_t<std::numeric_limits<std::uint32_t>::max()>>);
static_assert(std::is_same_v<std::uint64_t, min_required_t<std::numeric_limits<std::uint64_t>::max()>>);
// clang-format on

template<class T>
[[nodiscard]] [[gnu::cold]] constexpr auto copy_required_bytes(const auto data, std::type_identity<class cold>) {
  T t{};
  __builtin_memcpy(std::addressof(t), std::data(data), std::size(data));
  return t;
}

template<class T>
[[nodiscard]] [[gnu::always_inline]] constexpr auto copy_required_bytes(const auto data, std::false_type) {
  T t{};
  __builtin_memcpy(std::addressof(t), std::data(data), std::size(data));
  return t;
}

template<class T>
[[nodiscard]] [[gnu::target("bmi2")]] auto copy_required_bytes(const auto data, std::true_type) {
  // https://github.com/bminor/glibc/blob/master/sysdeps/generic/memcopy.h#L162
  if ((std::uint64_t(std::data(data)) & (MPH_PAGE_SIZE - 1ul)) >= (MPH_PAGE_SIZE - sizeof(T))) [[unlikely]] { // page boundry
    return copy_required_bytes<T>(data, std::type_identity<class cold>{});
  }

  T t{};
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Warray-bounds"
  __builtin_memcpy(std::addressof(t), std::data(data), sizeof(T)); // not at page boundry
#pragma GCC diagnostic pop
  if constexpr (sizeof(T) == sizeof(std::uint32_t)) {
    return T(_bzhi_u32(t, std::size(data) * CHAR_BIT));
  } else if constexpr (sizeof(T) == sizeof(std::uint64_t)) {
    return T(_bzhi_u64(t, std::size(data) * CHAR_BIT));
  }
  return t;
}

template<class T>
[[nodiscard]] [[gnu::always_inline]] constexpr auto copy_required_bytes(const auto data) {
  if constexpr (requires { std::bool_constant<(std::size(data), true)>{}; }) {
    if constexpr (std::size(data) == sizeof(T)) {
      return *std::bit_cast<const T*>(std::data(data));
    } else {
      static_assert(std::size(data) <= sizeof(T));
      T t{};
      __builtin_memcpy(std::addressof(t), std::data(data), std::size(data));
      return t;
    }
  } else {
    return copy_required_bytes<T>(data, std::bool_constant<MPH_ALLOW_UNSAFE_MEMCPY>{});
  }
}
}  // namespace utility

namespace concepts {
template <const std::uint64_t mask, const std::size_t max_bits_size>
concept bits_size_le = (std::popcount(mask) <= max_bits_size);

// clang-format off
static_assert(bits_size_le<0b00, 0u>);
static_assert(bits_size_le<0b00, 1u>);
static_assert(bits_size_le<0b00, 2u>);
static_assert(bits_size_le<0b10, 2u>);
static_assert(bits_size_le<0b01, 2u>);
static_assert(not bits_size_le<0b01, 0>);
static_assert(not bits_size_le<0b10, 0>);
static_assert(not bits_size_le<0b11, 1>);
// clang-format on

template <const auto masks, const std::size_t max_bits_size>
concept keys_bits_size_lt = std::all_of(std::cbegin(masks), std::cend(masks), [](const std::uint64_t mask) {
  return std::size_t(std::popcount(mask)) <= max_bits_size;
});

// clang-format off
static_assert(keys_bits_size_lt<std::array{0b00u, 0b00u}, 0u>);
static_assert(keys_bits_size_lt<std::array{0b01u, 0b01u}, 1u>);
static_assert(keys_bits_size_lt<std::array{0b10u, 0b01u}, 1u>);
static_assert(not keys_bits_size_lt<std::array{0b01u, 0b01u}, 0u>);
static_assert(not keys_bits_size_lt<std::array{0b11u, 0b10u}, 1u>);
static_assert(not keys_bits_size_lt<std::array{0b10u, 0b11u}, 1u>);
static_assert(not keys_bits_size_lt<std::array{0b11u, 0b11u}, 1u>);
// clang-format on

template <const auto keys, std::size_t size>
concept all_keys_size_lt = [](const auto &v) {
  return std::all_of(std::cbegin(v), std::cend(v), [](const auto &key) { return utility::size(get<0>(key)) <= size; });
}(keys);

// clang-format off
static_assert(not all_keys_size_lt<std::array{std::pair{std::array<char, 2>{}, 0}, std::pair{std::array<char, 2>{}, 0}}, 0u>);
static_assert(not all_keys_size_lt<std::array{std::pair{std::array<char, 2>{}, 0}, std::pair{std::array<char, 2>{}, 0}}, 1u>);
static_assert(all_keys_size_lt<std::array{std::pair{std::array<char, 1>{}, 0}, std::pair{std::array<char, 1>{}, 0}}, 1u>);
static_assert(all_keys_size_lt<std::array{std::pair{std::array<char, 1>{}, 0}, std::pair{std::array<char, 1>{}, 0}}, 2u>);
static_assert(all_keys_size_lt<std::array{std::pair{std::array<char, 2>{}, 0}, std::pair{std::array<char, 2>{}, 0}}, 2u>);
static_assert(all_keys_size_lt<std::array{std::pair{std::array<char, 2>{}, 0}, std::pair{std::array<char, 2>{}, 0}}, 3u>);
// clang-format on
}  // namespace concepts

inline constexpr auto unconditional = []([[maybe_unused]] const bool cond, const auto lhs, [[maybe_unused]] const auto rhs) {
  return lhs; // [unsafe] returns unconditionally
};

inline constexpr auto conditional = [](const bool cond, const auto lhs, const auto rhs) {
  return cond ? lhs : rhs; // generates jmp (x86-64)
};

template<auto Probablity>
inline constexpr auto conditional_probability = [](const bool cond, const auto lhs, const auto rhs) {
  if (__builtin_expect_with_probability(cond, 1, Probablity)) {
    return lhs;
  } else {
    return rhs;
  }
};

inline constexpr auto branchless = [](const bool cond, const auto lhs, [[maybe_unused]] const auto rhs) {
  return cond * lhs; // generates cmov (x86-64)
};

inline constexpr auto branchless_table = [](const bool cond, const auto lhs, const auto rhs) {
  return std::array{rhs, lhs}[cond];
};

/**
 * Minimal perfect hash based on SWAR
 *  reads sizeof(T) bytes and switches on that
 */
template<class T>
class swar {
 public:
  template <const auto unknown, const auto keys>
    requires concepts::all_keys_size_lt<keys, sizeof(T)>
  [[nodiscard]] constexpr auto operator()(auto&& data, [[maybe_unused]] auto &&...args) const noexcept(true) -> decltype(unknown) {
    if constexpr (requires { std::size(data); }) {
      return dispatch<unknown, keys>(utility::copy_required_bytes<T>(data), std::make_index_sequence<std::size(keys)>{});
    } else {
      return dispatch<unknown, keys>(data, std::make_index_sequence<std::size(keys)>{});
    }
  }

private:
  template<const auto unknown, const auto keys, const auto N, const auto... Ns>
  [[nodiscard]] static constexpr auto dispatch(const T value, std::index_sequence<N, Ns...>) {
    switch (value) {
      default:
        if constexpr (not sizeof...(Ns)) {
          return unknown;
        } else {
          return dispatch<unknown, keys>(value, std::index_sequence<Ns...>{});
        }
      case utility::as<T>(get<0>(keys[N])):
        return decltype(unknown)(get<1>(keys[N]));
    }
  }
};

/**
 * Minimal perfect hash based on intel's pext with support up to 2^max_bits_size elements and with max 8 characters
 *  requires platform with bmi2 support (https://en.wikipedia.org/wiki/X86_Bit_manipulation_instruction_set)
 */
template <const std::size_t max_bits_size, const auto result_policy = conditional>
class pext {
  template <class T, const auto keys, const auto mask, const std::size_t size>
  [[nodiscard]] static consteval auto make_lookup() {
    struct alignas(MPH_CACHE_LINE_SIZE) : std::array<T, size> {} lookup{};
    for (const auto &key : keys) {
      lookup[utility::pext<T>(utility::as<T>(get<0>(key)), mask)] = utility::as<T>(get<0>(key));
    }
    return lookup;
  }

  template <class T, const auto unknown, const auto keys, const auto mask, const std::size_t size>
  [[nodiscard]] static consteval auto make_index() {
    using type = std::remove_cvref_t<decltype(unknown)>;
    struct alignas(MPH_CACHE_LINE_SIZE) : std::array<type, size> {} index{};
    std::fill(std::begin(index), std::end(index), unknown);
    for (const auto &key : keys) {
      index[utility::pext<T>(utility::as<T>(get<0>(key)), mask)] = static_cast<type>(get<1>(key));
    }

    return index;
  }

  template<class T, const auto keys>
  [[nodiscard]] static consteval auto data() {
    if constexpr (std::integral<T>) {
      if constexpr (sizeof(T) <= sizeof(std::uint32_t)) {
        return std::uint32_t{};
      } else if constexpr (sizeof(T) <= sizeof(std::uint64_t)) {
        return std::uint64_t{};
      }
    } else if constexpr (utility::max_length<keys> <= sizeof(std::uint32_t)) {
      return std::uint32_t{};
    } else {
      return std::uint64_t{};
    }
  }

 public:
  template <const auto unknown, const auto keys, class TData, class T = decltype(data<std::remove_cvref_t<TData>, keys>()), const auto mask = utility::find_mask<T>(keys)>
    requires concepts::bits_size_le<mask, max_bits_size> and concepts::all_keys_size_lt<keys, sizeof(T)>
  [[nodiscard]] [[gnu::target("bmi2")]] auto operator()(TData&& data, [[maybe_unused]] auto &&...args) const noexcept(true) -> decltype(unknown) {
    constexpr auto required_size = [] {
      auto result{1u};
      for (auto i = 0u; i < std::popcount(std::uint64_t(mask)); ++i) {
        result *= 2; // std::pow is not constexpr in libc++
      }
      return result;
    }();

    static constexpr const auto lookup = make_lookup<T, keys, mask, required_size>();
    static_assert(MPH_CACHE_LINE_SIZE <= alignof(decltype(lookup)));

    static constexpr const auto index = make_index<T, unknown, keys, mask, required_size>();
    static_assert(MPH_CACHE_LINE_SIZE <= alignof(decltype(index)));

    T&& lhs = [&] {
      if constexpr (requires { std::size(data); }) {
        return utility::copy_required_bytes<T>(data);
      } else {
        return std::forward<decltype(data)>(data);
      }
    }();
    const auto ext = utility::pext(lhs, mask);
    return result_policy(lookup[ext] == lhs, index[ext], std::remove_cvref_t<decltype(index[ext])>(unknown));
  }
};

/**
 * Minimal perfect hash based on intel's pext with support up to 2^max_bits_size per split on N'th character and with max 8 characters
 *  requires platform with bmi2 support (https://en.wikipedia.org/wiki/X86_Bit_manipulation_instruction_set)
 */
template <const std::size_t max_bits_size, const std::size_t split_index,
          const auto result_policy = conditional>
class pext_split {
  template<class T, const auto keys>
  [[nodiscard]] static consteval auto make_masks() {
    constexpr auto size = std::numeric_limits<std::remove_cvref_t<decltype(get<0>(keys[0])[0])>>::max();

    std::vector<std::vector<std::tuple<std::remove_cvref_t<decltype(get<0>(keys[0]))>>>> v(size);
    for (const auto &key : keys) {
      v[std::size_t(get<0>(key)[split_index])].push_back(get<0>(key));
    }

    std::array<T, size> masks{}; // only used at compile-time, no alignment required
    for (auto i = 0u; i < std::size(masks); ++i) {
      masks[i] = utility::find_mask<T>(v[i]);
    }

    return masks;
  }

  template <class T, const auto keys, const auto masks, const std::size_t size>
  [[nodiscard]] static consteval auto make_lookups() {
    constexpr auto split_size = std::numeric_limits<std::remove_cvref_t<decltype(get<0>(keys[0])[0])>>::max();

    std::array<std::vector<std::remove_cvref_t<decltype(get<0>(keys[0]))>>, split_size> v{};
    for (const auto &key : keys) {
      v[std::size_t(get<0>(key)[split_index])].push_back(get<0>(key));
    }

    struct alignas(MPH_CACHE_LINE_SIZE) underlying : std::array<T, size> { };
    struct alignas(MPH_CACHE_LINE_SIZE) : std::array<underlying, split_size> { } lookup{};
    for (auto i = 0u; i < split_size; ++i) {
      for (auto j = 0u; j < std::size(v[i]); ++j) {
        lookup[i][utility::pext<T>(utility::as<T>(v[i][j]), masks[i])] = utility::as<T>(v[i][j]);
      }
    }

    return lookup;
  }

  template <class T, const auto unknown, const auto keys, const auto masks, const std::size_t size>
  [[nodiscard]] static consteval auto make_indexes() {
    constexpr auto split_size = std::numeric_limits<std::remove_cvref_t<decltype(get<0>(keys[0])[0])>>::max();

    std::array<std::vector<std::remove_cvref_t<decltype(keys[0])>>, split_size> iv{};
    for (const auto &key : keys) {
      iv[std::size_t(get<0>(key)[split_index])].push_back(key);
    }

    using type = std::remove_cvref_t<decltype(unknown)>;
    struct alignas(MPH_CACHE_LINE_SIZE) underlying : std::array<type, size> { };
    struct alignas(MPH_CACHE_LINE_SIZE) : std::array<underlying, split_size> { } index{};
    for (auto i = 0u; i < split_size; ++i) {
      std::fill(std::begin(index[i]), std::end(index[i]), unknown);
      for (auto j = 0u; j < std::size(iv[i]); ++j) {
        index[i][utility::pext<T>(utility::as<T>(get<0>(iv[i][j])), masks[i])] = static_cast<type>(get<1>(iv[i][j]));
      }
    }

    return index;
  }

 public:
  template <const auto unknown, const auto keys, class TData, class T = std::conditional_t<(utility::max_length<keys> <= sizeof(std::uint32_t)), std::uint32_t, std::uint64_t>, const auto masks = make_masks<T, keys>()>
    requires concepts::keys_bits_size_lt<masks, max_bits_size> and concepts::all_keys_size_lt<keys, sizeof(T)>
  [[nodiscard]] [[gnu::target("bmi2")]] auto operator()(TData&& data, [[maybe_unused]] auto &&...args) const noexcept(true) -> decltype(unknown) requires requires { std::size(data); } {
    constexpr auto required_size = [] {
      std::vector<std::size_t> sizes{};
      std::transform(std::cbegin(masks), std::cend(masks), std::back_inserter(sizes), [](const auto mask) { return std::popcount(mask); });
      const auto max_size = std::max_element(std::cbegin(sizes), std::cend(sizes));
      auto result{1u};
      for (auto i = 0u; i < *max_size; ++i) {
        result *= 2; // std::pow is not constexpr in libc++
      }
      return result;
    }();

    static constexpr auto lookup = make_lookups<T, keys, masks, required_size>();
    static_assert(MPH_CACHE_LINE_SIZE == alignof(decltype(lookup)));
    static_assert(MPH_CACHE_LINE_SIZE == alignof(decltype(lookup[0])) and MPH_CACHE_LINE_SIZE == alignof(decltype(lookup[std::size(lookup)-1])));

    static constexpr auto index = make_indexes<T, unknown, keys, masks, required_size>();
    static_assert(MPH_CACHE_LINE_SIZE == alignof(decltype(index)));
    static_assert(MPH_CACHE_LINE_SIZE == alignof(decltype(lookup[std::size(lookup)-1])) and MPH_CACHE_LINE_SIZE == alignof(decltype(lookup[std::size(lookup)-1])));

    assert(std::size(data) > split_index);

    const auto id = data[split_index];
    const auto lhs = utility::copy_required_bytes<T>(data);
    const auto ext = utility::pext(lhs, masks[id]);
    return result_policy(lookup[id][ext] == lhs, index[id][ext], std::remove_cvref_t<decltype(index[id][ext])>(unknown));
  }
};

template <class T, const auto sentinel = std::numeric_limits<T>::max()>
struct optional final { // std::optional is not literal type
  using value_type = utility::min_required_t<sentinel>;

  constexpr optional() : value{sentinel} {}
  constexpr explicit(false) optional(const T v) : value(static_cast<value_type>(v)) {}
  [[nodiscard]] constexpr operator bool() const { return value != sentinel; }
  [[nodiscard]] constexpr auto operator*() const { return T(value); }

  value_type value{};
};

// clang-format off
static_assert(not optional<int>{});
static_assert(std::numeric_limits<int>::max() == *optional<int>{});
static_assert(optional<int>{42});
static_assert(42 == *optional<int>{42});
static_assert(0u == *optional<int, 0u>{});
// clang-format on

/**
 * Default policies
 *
 * @tparam unknown returned if there is no match
 * @tparam keys constexpr pair of id values such as std::array{{std::pair{"FOO"}, 1}, std::pair{"BAR"}, 2}}
 * @param data continuous input data such as std::string_view, std::span, std::array or integral value
 * @param args... args propagated to policies
 * @return second from matched key or unknown if not matched
 */
constexpr auto policies = []<const auto unknown, const auto keys>(auto&& data, auto&&... args) {
  using type = std::remove_cvref_t<decltype(data)>;
  constexpr auto hash_cant_be_created = [](auto &&) { return false; }(keys);  // static_assert(false) support is C++23

  if constexpr (requires { std::size(data); }) {
    if constexpr (constexpr auto min_max = utility::min_max_length<keys>; min_max.first == min_max.second and min_max.first == sizeof(std::uint32_t) and std::size(keys) < 4u) {
      return mph::swar<std::uint32_t>{}.template operator()<unknown, keys>(std::forward<decltype(data)>(data), std::forward<decltype(args)>(args)...);
    } else if constexpr (min_max.first == min_max.second and min_max.first == sizeof(std::uint64_t) and std::size(keys) < 4u) {
      return mph::swar<std::uint64_t>{}.template operator()<unknown, keys>(std::forward<decltype(data)>(data), std::forward<decltype(args)>(args)...);
    } else if constexpr (constexpr auto pext = mph::pext<7u>{}; requires { pext.template operator()<unknown, keys>(std::forward<decltype(data)>(data), std::forward<decltype(args)>(args)...); }) {
      return pext.template operator()<unknown, keys>(std::forward<decltype(data)>(data), std::forward<decltype(args)>(args)...);
    } else if constexpr (constexpr auto pext_split = mph::pext_split<7u, utility::find_unique_char_max_dist<keys>>{}; requires { pext_split.template operator()<unknown, keys>(std::forward<decltype(data)>(data), std::forward<decltype(args)>(args)...); }) {
      return pext_split.template operator()<unknown, keys>(std::forward<decltype(data)>(data), std::forward<decltype(args)>(args)...);
    } else {
      static_assert(hash_cant_be_created, "string hash can't be created with given policies!");
    }
  } else if constexpr (std::integral<type>) {
    if constexpr (sizeof(type) <= sizeof(std::uint32_t) and std::size(keys) < 4u) {
      return mph::swar<std::uint32_t>{}.template operator()<unknown, keys>(std::forward<decltype(data)>(data), std::forward<decltype(args)>(args)...);
    } else if constexpr (sizeof(type) <= sizeof(std::uint64_t) and std::size(keys) < 4u) {
      return mph::swar<std::uint64_t>{}.template operator()<unknown, keys>(std::forward<decltype(data)>(data), std::forward<decltype(args)>(args)...);
    } else if constexpr (constexpr auto pext = mph::pext<7u>{}; requires { pext.template operator()<unknown, keys>(std::forward<decltype(data)>(data), std::forward<decltype(args)>(args)...); }) {
      return pext.template operator()<unknown, keys>(std::forward<decltype(data)>(data), std::forward<decltype(args)>(args)...);
    } else {
      static_assert(hash_cant_be_created, "integral hash can't be created with given policies!");
    }
  } else {
    static_assert(hash_cant_be_created, "hash can't be created with given policies!");
  }
};

/**
 * Minimal perfect hash function
 *
 * @tparam keys constexpr pair of id values such as std::array{{std::pair{"FOO"}, 1}, std::pair{"BAR"}, 2}}
 * @tparam policies invocable returns the hash
 * @param data continuous input data such as std::string_view, std::span, std::array or integral value
 * @param args... args propagated to policies
 * @return result of executing policies
 */
template<const auto keys,
         const auto policies = mph::policies,
         auto unknown = optional<std::remove_cvref_t<decltype(get<1>(keys[0]))>, utility::max_value<keys>+1u>{}>
  requires (std::size(keys) > 1u)
constexpr auto hash = [] /*[[nodiscard]]*/ (auto&& data, [[maybe_unused]] auto &&... args) noexcept(true) { // attributes on lambdas is C++23
  if (std::is_constant_evaluated()) { // if consteval is C++23
    constexpr auto cmp = [](const auto& lhs, const auto& rhs) {
      if constexpr (requires { std::string_view{lhs}; std::string_view{rhs.data(), rhs.size()}; }) {
        return std::string_view{lhs} == std::string_view{std::data(rhs), std::size(rhs)};
      } else if constexpr (requires { std::string_view{lhs}; std::string_view{rhs}; }) {
        return std::string_view{lhs} == std::string_view{rhs};
      } else if constexpr (requires { lhs == rhs; }) {
        return lhs == rhs;
      } else {
        return false;
      }
    };

    // clang-format off
    static_assert(cmp(42, 42));
    static_assert(not cmp(4, 2));
    static_assert(cmp(mph::fixed_string{"foo"}, "foo"));
    static_assert(not cmp(mph::fixed_string{"foo"}, "bar"));
    static_assert(cmp(mph::fixed_string{"foo"}, std::array{'f','o','o'}));
    static_assert(not cmp(mph::fixed_string{"foo"}, std::array{'b','a','r'}));
    // clang-format on

    for (const auto& key : keys) {
      if (cmp(key.first, std::forward<decltype(data)>(data))) {
        return decltype(unknown){key.second};
      }
    }
    return unknown;
  } else {
    return utility::overload{
      [&]<class T> requires std::integral<T> and std::same_as<T, std::remove_cvref_t<decltype(get<0>(keys[0]))>> (const T value) {
        return policies.template operator()<unknown, keys>(value, std::forward<decltype(args)>(args)...);
      },
      [&]<class T, const std::size_t Size> (const T (&v)[Size]) {
        if (constexpr auto min_max = utility::min_max_length<keys>; Size-1 < min_max.first or Size-1 > min_max.second) {
          return unknown;
        }
        assert(Size-1 > 0u);
        return policies.template operator()<unknown, keys>(std::span<const T, Size-1>{v, v + Size-1}, std::forward<decltype(args)>(args)...);
      },
      [&]<class T, const std::size_t MaxSize> (const basic_fixed_string<T, MaxSize> fs) {
        if (constexpr auto min_max = utility::min_max_length<keys>; std::size(fs) < min_max.first or std::size(fs) > min_max.second) {
          return unknown;
        }
        assert(std::size(fs) > 0u);
        return policies.template operator()<unknown, keys>(fs, std::forward<decltype(args)>(args)...);
      },
      [&]<class T, class... Ts> (const std::basic_string_view<T, Ts...> sv) {
        if (constexpr auto min_max = utility::min_max_length<keys>; std::size(sv) < min_max.first or std::size(sv) > min_max.second) {
          return unknown;
        }
        assert(std::size(sv) > 0u);
        return policies.template operator()<unknown, keys>(sv, std::forward<decltype(args)>(args)...);
      },
      [&]<class T, const std::size_t Size> (const std::span<T, Size> span) {
        if constexpr (constexpr auto min_max = utility::min_max_length<keys>; Size != std::dynamic_extent and (Size < min_max.first or Size > min_max.second)) {
          return unknown;
        } else {
          if (const auto size = std::size(span); size < min_max.first or size > min_max.second) {
            return unknown;
          }
          assert(std::size(span) > 0u);
          return policies.template operator()<unknown, keys>(span, std::forward<decltype(args)>(args)...);
        }
      },
      [&]<class T, const std::size_t Size> (const std::array<T, Size>& array) {
        if constexpr (constexpr auto min_max = utility::min_max_length<keys>; Size < min_max.first or Size > min_max.second) {
          return unknown;
        } else {
          return policies.template operator()<unknown, keys>(array, std::forward<decltype(args)>(args)...);
        }
      },
    }(std::forward<decltype(data)>(data));
  }
};

template <class T1, class T2>
struct pair {
  constexpr explicit(false) pair(const T1 t1, const T2 t2) : first{t1}, second{t2} {}
  T1 first{};
  T2 second{};
};
template<class T> pair(const char*, T) -> pair<fixed_string, T>;

// clang-format off
static_assert(int(4) == pair{int(4), short(2)}.first);
static_assert(short(2) == pair{int(4), short(2)}.second);
static_assert(std::string_view{"foo"} == std::string_view{pair{"foo", 42}.first});
// clang-format on

template<const std::size_t N, class T1, class T2>
[[nodiscard]] constexpr auto get(const pair<T1, T2>& p) -> decltype(auto) {
  if constexpr (0u == N) {
    return p.first;
  } else if constexpr (1u == N) {
    return p.second;
  }
}

// clang-format off
static_assert(1 == get<0>(pair{1, 2}));
static_assert(2 == get<1>(pair{1, 2}));
// clang-format on
}  // namespace mph::inline v1_0_7
#endif  // MPH
#endif  //  __cplusplus
